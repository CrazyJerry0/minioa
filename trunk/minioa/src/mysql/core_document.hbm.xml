<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE hibernate-mapping PUBLIC 
      "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
      "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<hibernate-mapping auto-import="true" package="org.minioa.core">
    <sql-query name="core.document.insert.record">
    <![CDATA[
        insert into core_document(CID_,CDATE_,cateId,docName,uuid) values(:cId,:cDate,:cateId,:docName,:uuid)
    ]]>
    </sql-query>
    <sql-query name="core.document.select.records">
    <![CDATA[
        select doc.ID_,doc.CID_,doc.CDATE_,
        	doc.cateId,doc.docName,doc.uuid,cate.cateName,u.displayName
        from core_document doc
        left join core_document_cate cate on cate.ID_ = doc.cateId
        left join core_user u on u.ID_ = doc.CID_
        where (doc.CID_ = :userId or exists (select 1 from core_document_role_relation r where r.roleId in (SELECT role.roleId FROM core_role_user_relation role where role.userId = :userId) and r.docId = doc.ID_) or exists (select 1 from core_document_user_relation u where u.userId = :userId and u.docId = doc.ID_))
    ]]>
    </sql-query>
    <sql-query name="core.document.select.records.pics">
    <![CDATA[
				SELECT att.ID_,att.fileName,att.oldName,doc.cateId
				FROM core_document_attachment att
				left join core_document doc on doc.uuid = att.uuid
				left join core_document_cate cate on cate.ID_ =doc.cateId
				where LOWER(att.fileType) in ('.jpg','.jpeg','.bwp','.gif','.png') and cate.cateCode = :cateCode
				and (doc.CID_ = :userId or exists (select 1 from core_document_role_relation r where r.roleId in (SELECT role.roleId FROM core_role_user_relation role where role.userId = :userId) and r.docId = doc.ID_) or exists (select 1 from core_document_user_relation u where u.userId = :userId and u.docId = doc.ID_))
				order by att.CDATE_ desc limit 30
    ]]>
    </sql-query>
    <sql-query name="core.document.select.records.files">
    <![CDATA[
				SELECT att.ID_,att.fileName,att.oldName,doc.cateId
				FROM core_document_attachment att
				left join core_document doc on doc.uuid = att.uuid
				left join core_document_cate cate on cate.ID_ =doc.cateId
				where cate.cateCode = :cateCode
				and (doc.CID_ = :userId or exists (select 1 from core_document_role_relation r where r.roleId in (SELECT role.roleId FROM core_role_user_relation role where role.userId = :userId) and r.docId = doc.ID_) or exists (select 1 from core_document_user_relation u where u.userId = :userId and u.docId = doc.ID_))
				order by att.CDATE_ desc limit 30
    ]]>
    </sql-query>
    <sql-query name="core.document.select.records.count">
    <![CDATA[
        select count(*) as result from core_document
    ]]>
    </sql-query>
    <sql-query name="core.document.select.record.where.id">
    <![CDATA[
        select doc.ID_,doc.CID_,doc.CDATE_,
        	doc.cateId,doc.docName,doc.uuid,u.displayName
        from core_document doc
        left join core_user u on u.ID_ = doc.CID_
        where doc.ID_ = :id
    ]]>
    </sql-query>
    <sql-query name="core.document.update.record.where.id">
    <![CDATA[
        update core_document set MID_ = :mId, MDATE_ = :mDate,
        	cateId = :cateId, docName = :docName
        where ID_ = :id
    ]]>
    </sql-query>
    <sql-query name="core.document.delete.record.where.id">
    <![CDATA[
        delete from core_document where ID_ = :id
    ]]>
    </sql-query>
</hibernate-mapping>