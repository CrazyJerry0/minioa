<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-mapping PUBLIC 
      "-//Hibernate/Hibernate Mapping DTD 3.0//EN" 
      "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd"> 
 
<hibernate-mapping auto-import="true" package="org.minioa.core">
    <class name="User" table="core_user">
      <id name="ID_" column="ID_" type="java.lang.Integer">
      	<generator class="increment" />
      </id>
      <property name="CID_" column="CID_" type="java.lang.Integer"/>
			<property name="CDATE_" column="CDATE_" type="java.util.Date"/>
			<property name="MID_" column="MID_" type="java.lang.Integer"/>
			<property name="MDATE_" column="MDATE_" type="java.util.Date"/>
			<property name="depaId" column="depaId" type="java.lang.Integer"/>
			<property name="superiorId" column="superiorId" type="java.lang.Integer"/>
			<property name="managerId" column="managerId" type="java.lang.Integer"/>
			<property name="userName" column="userName" type="java.lang.String"/>
			<property name="email" column="email" type="java.lang.String"/>
			<property name="password" column="password" type="java.lang.String"/>
			<property name="workPhone" column="workPhone" type="java.lang.String"/>
			<property name="mobilePhone" column="mobilePhone" type="java.lang.String"/>
			<property name="position" column="position" type="java.lang.String"/>
			<property name="employeeNo" column="employeeNo" type="java.lang.String"/>
			<property name="gender" column="gender" type="java.lang.String"/>
			<property name="displayName" column="displayName" type="java.lang.String"/>
			<property name="isLock" column="isLock" type="java.lang.Boolean"/>
    </class>
    <sql-query name="core.user.select.records">
    <![CDATA[
        select u.ID_,u.CID_,u.CDATE_,u.MID_,u.MDATE_,
        	u.depaId,u.superiorId,u.managerId,u.userName,u.email,u.password,u.workPhone,u.mobilePhone,u.position,u.employeeNo,u.gender,u.displayName,
        	depa.depaName, u2.userName as superior,u3.userName as manager,u.isLock,u.pinyin
        from core_user u
        left join core_department depa on depa.ID_ = u.depaId
        left join core_user u2 on u2.ID_ = u.superiorId
        left join core_user u3 on u3.ID_ = u.managerId
    ]]>
    </sql-query>
    <sql-query name="core.user.select.records.count">
    <![CDATA[
        select count(*) as ds from core_user u
    ]]>
    </sql-query>
    <sql-query name="core.user.select.records.list">
    <![CDATA[
        select ID_,userName,displayName
        from core_user
        order by pinyin,displayName
    ]]>
    </sql-query>
		<sql-query name="core.user.select.records.where.id">
    <![CDATA[
        select u.ID_,u.CID_,u.CDATE_,u.MID_,u.MDATE_,
        	u.depaId,u.superiorId,u.managerId,u.userName,u.email,u.password,u.workPhone,u.mobilePhone,u.position,u.employeeNo,u.gender,u.displayName,
        	depa.depaName, u2.userName as superior,u3.userName as manager,u.isLock,u.pinyin
        from core_user u
        left join core_department depa on depa.ID_ = u.depaId
        left join core_user u2 on u2.ID_ = u.superiorId
        left join core_user u3 on u3.ID_ = u.managerId
        where u.ID_ = :id
    ]]>
    </sql-query>
		<sql-query name="core.user.select.records.where.userName">
    <![CDATA[
        select u.ID_,u.CID_,u.CDATE_,u.MID_,u.MDATE_,
        	u.depaId,u.superiorId,u.managerId,u.userName,u.email,u.password,u.workPhone,u.mobilePhone,u.position,u.employeeNo,u.gender,u.displayName,
        	depa.depaName, u2.userName as superior,u3.userName as manager,u.isLock,u.pinyin
        from core_user u
        left join core_department depa on depa.ID_ = u.depaId
        left join core_user u2 on u2.ID_ = u.superiorId
        left join core_user u3 on u3.ID_ = u.managerId
        where u.userName = :userName
    ]]>
    </sql-query>
		<sql-query name="core.user.login">
    <![CDATA[
        select u.ID_,u.CID_,u.CDATE_,u.MID_,u.MDATE_,
        	u.depaId,u.superiorId,u.managerId,u.userName,u.email,u.password,u.workPhone,u.mobilePhone,u.position,u.employeeNo,u.gender,u.displayName,
        	depa.depaName, u2.userName as superior,u3.userName as manager,u.isLock,u.pinyin
        from core_user u
        left join core_department depa on depa.ID_ = u.depaId
        left join core_user u2 on u2.ID_ = u.superiorId
        left join core_user u3 on u3.ID_ = u.managerId
        where (u.userName = :userName or u.employeeNo = :userName) and u.password = :password
    ]]>
    </sql-query>
    
		<sql-query name="core.user.isRecordExists.where.userName">
    <![CDATA[
        select count(*) as tmp
        from core_user where userName = :userName or employeeNo = :userName
    ]]>
    </sql-query>
    <sql-query name="core.user.update.record.where.id">
    <![CDATA[
        update core_user set MID_ = :mId, MDATE_ = :mDate, 
        	depaId = :depaId,superiorId = :superiorId,managerId = :managerId,userName = :userName,email = :email,
        	workPhone = :workPhone,mobilePhone = :mobilePhone,position = :position,
        	employeeNo = :employeeNo,gender = :gender,displayName = :displayName,
        	pinyin = core_getpinyin_f(:displayName),
        	isLock = :isLock
        where ID_ = :id
    ]]>
    </sql-query>
    <sql-query name="core.user.update.profile.where.id">
    <![CDATA[
        update core_user set MID_ = :mId, MDATE_ = :mDate,
        	depaId = :depaId,superiorId = :superiorId,managerId = :managerId, email = :email,
        	workPhone = :workPhone,mobilePhone = :mobilePhone,position = :position,employeeNo = :employeeNo,
        	gender = :gender,displayName = :displayName,pinyin = core_getpinyin_f(:displayName)
        where ID_ = :id
    ]]>
    </sql-query>
    <sql-query name="core.user.update.password.where.id">
    <![CDATA[
        update core_user set MID_ = :mId, MDATE_ = :mDate, password = :password
        where ID_ = :id
    ]]>
    </sql-query>
    <sql-query name="core.user.delete.record.where.id">
    <![CDATA[
        delete from core_user where ID_ = :id
    ]]>
    </sql-query>
		<sql-query name="core.user.getUserId.where.userName">
    <![CDATA[
        select ID_
        from core_user where userName = :userName limit 1
    ]]>
    </sql-query>
		<sql-query name="core.user.select.roles">
    <![CDATA[
        SELECT r.roleName FROM core_role r, core_role_user_relation rela where r.ID_=rela.roleId and rela.userId=:userId
    ]]>
    </sql-query>
    
</hibernate-mapping>